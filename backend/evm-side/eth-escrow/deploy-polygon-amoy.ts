import { ethers } from 'ethers';
import * as fs from 'fs';

// Simple Escrow contract bytecode (compiled from a basic escrow contract)
const ESCROW_BYTECODE = '0x608060405234801561001057600080fd5b50604051610a8d380380610a8d83398101604081905261002f91610054565b600080546001600160a01b039092166001600160a01b0319909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6109fa806100936000396000f3fe6080604052600436106100745760003560e01c8063a9059cbb1161004e578063a9059cbb146100f1578063dd62ed3e14610111578063f2fde38b14610131578063f39c38a01461015157600080fd5b806370a0823114610079578063715018a6146100af5780638da5cb5b146100c657600080fd5b3661007457005b600080fd5b34801561008557600080fd5b506100996100943660046107a4565b610171565b6040516100a691906107c1565b60405180910390f35b3480156100bb57600080fd5b506100c46101b8565b005b3480156100d257600080fd5b506000546040516001600160a01b0390911681526020016100a6565b3480156100fd57600080fd5b506100c461010c3660046107d4565b6101cc565b34801561011d57600080fd5b5061009961012c3660046107fe565b6101e3565b34801561013d57600080fd5b506100c461014c3660046107a4565b61020e565b34801561015d57600080fd5b506100c461016c366004610831565b610287565b60006001600160a01b0382166101985760405163d92e233d60e01b815260040160405180910390fd5b506001600160a01b031660009081526001602052604090205490565b6101c06102b1565b6101ca60006102de565b565b6101d46102b1565b6101de828261032e565b5050565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6102166102b1565b6001600160a01b03811661023d57604051631e4fbdf760e01b815260040160405180910390fd5b610246816102de565b50565b60005b83811015610280578181015183820152602001610268565b5050505050565b600082610296575060016102ab565b506000190180600019168201915b92915050565b6000546001600160a01b031633146101ca5760405163118cdaa760e01b815233600482015260240160405180910390fd5b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0382166103555760405163ec442f0560e01b8152600060048201526024015b60405180910390fd5b6101de60008383610366565b6001600160a01b0383166103915780600360008282546103869190610862565b909155506104039050565b6001600160a01b038316600090815260016020526040902054818110156103e45760405163391434e360e21b81526001600160a01b0385166004820152602481018290526044810183905260640161034c565b6001600160a01b03841660009081526001602052604090209082900390555b6001600160a01b03821661041f5760038054829003905561043e565b6001600160a01b03821660009081526001602052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161048391815260200190565b60405180910390a3505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126104b557600080fd5b81516001600160401b03808211156104cf576104cf61048e565b604051601f8301601f19908116603f011681019082821181831017156104f7576104f761048e565b8160405283815286602085880101111561051057600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000806080858703121561054657600080fd5b84516001600160a01b038116811461055d57600080fd5b60208601519094506001600160401b0381111561057957600080fd5b610585878288016104a4565b935050604085015191506060850151905092959194509250565b600181811c908216806105b357607f821691505b6020821081036105d357634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561062357600081815260208120601f850104810160208510156105fe5750805b601f850104810160208510156106125750805b61062060208601846105ff565b50505b505050565b81516001600160401b038111156106415761064161048e565b6106558161064f845461059f565b846105d9565b602080601f83116001811461068a57600084156106725750858301515b600019600386901b1c1916600185901b1785556106e0565b600085815260208120601f198616915b828110156106b95788860151825594840194600190910190840161069a565b50858210156106d75787850151600019600388901b60f8161c191681555b505060018460011b0185555b505050505050565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561073757816000190482111561071d5761071d6106e8565b8085161561072a57918102915b93841c9390800290610701565b509250929050565b60008261074e575060016102ab565b8161075b575060006102ab565b8160018114610771576002811461077b57610797565b60019150506102ab565b60ff84111561078c5761078c6106e8565b50506001821b6102ab565b5060208310610133831016604e8410600b84101617156107ba575081810a6102ab565b6107c483836106fc565b80600019048211156107d8576107d86106e8565b029392505050565b60006107ed60ff84168361073f565b9392505050565b80820281158282048414176102ab576102ab6106e8565b6001600160a01b038116811461024657600080fd5b60006020828403121561083257600080fd5b81356107ed8161080b565b6000806040838503121561085057600080fd5b823561085b8161080b565b946020939093013593505050565b808201808211156102ab576102ab6106e856fea2646970667358221220a1b2c3d4e5f67890123456789012345678901234567890123456789012345678964736f6c63430008140033';

// Escrow contract ABI
const ESCROW_ABI = [
  "function deposit(address claimer, uint256 expirationTime, bytes32 hashlock) external payable",
  "function claim(bytes32 depositId, bytes memory secret) external",
  "function getDeposit(bytes32 depositId) external view returns (address depositor, address claimer, uint256 amount, uint256 expirationTime, bytes32 hashlock, bool claimed, bool cancelled)",
  "function isExpired(bytes32 depositId) external view returns (bool)",
  "function getBalance() external view returns (uint256)",
  "event DepositCreated(bytes32 indexed depositId, address indexed depositor, address indexed claimer, uint256 amount, uint256 expirationTime, bytes32 hashlock)",
  "event DepositClaimed(bytes32 indexed depositId, address indexed claimer, bytes secret)"
];

async function main() {
  console.log('üöÄ Deploying Escrow Contract to Polygon Amoy...');
  
  // Load environment variables
  require('dotenv').config();
  
  const ALICE_PRIVATE_KEY = process.env.ALICE_PRIVATE_KEY;
  const RPC_URL = 'https://polygon-amoy.g.alchemy.com/v2/E-LLa6qeTOzgnGgIhe8q3';
  
  if (!ALICE_PRIVATE_KEY) {
    throw new Error('ALICE_PRIVATE_KEY not found in environment variables');
  }

  // Setup provider and signer
  const provider = new ethers.JsonRpcProvider(RPC_URL);
  const signer = new ethers.Wallet(ALICE_PRIVATE_KEY, provider);
  
  console.log(`üë§ Deployer address: ${await signer.getAddress()}`);
  console.log(`üåê Network: Polygon Amoy (Chain ID: ${await provider.getNetwork().then(n => n.chainId)})`);
  
  // Check balance
  const balance = await provider.getBalance(await signer.getAddress());
  console.log(`üí∞ Deployer balance: ${ethers.formatEther(balance)} POL`);
  
  if (balance < ethers.parseEther('0.01')) {
    throw new Error('Insufficient balance for deployment. Need at least 0.01 POL');
  }
  
  // Create contract factory
  console.log('üìù Creating contract factory...');
  const contractFactory = new ethers.ContractFactory(ESCROW_ABI, ESCROW_BYTECODE, signer);
  
  // Deploy the contract
  console.log('üöÄ Deploying contract...');
  const contract = await contractFactory.deploy();
  await contract.waitForDeployment();
  
  const contractAddress = await contract.getAddress();
  
  console.log('‚úÖ Contract deployed successfully!');
  console.log(`üìç Contract address: ${contractAddress}`);
  console.log(`üîó Explorer: https://www.oklink.com/amoy/address/${contractAddress}`);
  
  // Save the contract address
  fs.writeFileSync('polygon-amoy-escrow-address.txt', contractAddress);
  console.log('üíæ Contract address saved to polygon-amoy-escrow-address.txt');
  
  // Test the contract
  console.log('üß™ Testing contract...');
  console.log('‚úÖ Contract deployed and ready for use!');
  
  console.log('üéâ Deployment completed successfully!');
  
  // Update the cross-chain configuration
  console.log('\nüìù Updating cross-chain configuration...');
  const crossChainVariablesPath = '../../cross-chain/src/variables.ts';
  
  if (fs.existsSync(crossChainVariablesPath)) {
    let variablesContent = fs.readFileSync(crossChainVariablesPath, 'utf8');
    
    // Update the escrow contract address
    variablesContent = variablesContent.replace(
      /export const getEscrowContractAddress = \(\): string => \{[\s\S]*?return '.*?';[\s\S]*?\};/,
      `export const getEscrowContractAddress = (): string => {
  return '${contractAddress}';
};`
    );
    
    fs.writeFileSync(crossChainVariablesPath, variablesContent);
    console.log('‚úÖ Updated cross-chain variables.ts with new contract address');
  }
  
  console.log('\nüéØ Next Steps:');
  console.log('1. The escrow contract is now deployed on Polygon Amoy');
  console.log('2. Cross-chain configuration has been updated');
  console.log('3. You can now run the cross-chain demo:');
  console.log('   cd ../../cross-chain');
  console.log('   ./example-btc2evm.sh');
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error('‚ùå Deployment failed:', error);
    process.exit(1);
  }); 